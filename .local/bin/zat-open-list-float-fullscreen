#!/bin/sh

info=$(cat << EOF
SYNOPSIS
        zat-open-list-float-fullscreen [-d directory] [-t tag] [-s start] [-e end]

DESCRIPTION
        open a list of files with zathura
        in fullscreen stacked mode with river
        directory is an optional parameter
        if not specified current directory is considered
        river tag is an optional parameter
        if not specified current river tag is considered
        start and finish are two numbers (finish >= start)
        this script will open all files that start with a number
        between start and finish (start <= number <= finish)
        if start and finish are not specified
        zathura tries to open all files in directory
        specifying one between start and end is also allowed

        -h, --help
            print this info and exit

        -d, --directory=
            directory that contains files

        -t, --tag=
            open files in specified river tag

        -s, --start=
            start number

        -e, --end=
            end number
EOF
)

print_error() {
    printf "error: %s\n\n" "$1"
    echo "$info"
}

print_set_two_times() {
    print_error "$1 set two times"
}

set_option_one_dash() {
    option="$1"
    shift 1
    if [ "$#" -ge 2 ]; then
        if eval [ -z "\$$option" ]; then
            eval "$option=$2"
        else
            print_set_two_times "$option"
            return 1
        fi
    else
        print_error "$option not present"
        return 1
    fi
    return 0
}

set_option_two_dash() {
    option="$1"
    shift 1
    if eval [ -z "\$$option" ]; then
        eval "$option=$(echo "$1" | cut -d '=' -f '2-')"
    else
        print_set_two_times "$option"
        return 1
    fi
}

is_number() {
    # check if parameter is a number
    if [ "$1" -ge 0 ] > /dev/null 2>&1; then
        return 0
    else
        print_error "$1 is not a number >= 0"
        return 1
    fi
}

open_file() {
    program="$1"
    file="$2"

    if [ -f "$file" ]; then
        case "$file" in
            *.pdf|*.djvu|*.ps)
                $program "$file"
                sleep 1
                riverctl-float-fullscreen
                return 0
            ;;
            *)
                return 1
            ;;
        esac
    else
        return 1
    fi
}

find_open_file() {
    current="$1"
    program="$2"

    # try wit and without 0 in front of file number
    file="$(fd --type file --type symlink --exact-depth 1 ^0?${current}[^0-9])"

    if [ -f "$file" ]; then
        open_file "$program" "$file"
        return 0
    else
        return 1
    fi
}

while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            echo "$info"
            return 0
        ;;
        -d)
            if set_option_one_dash directory "$@"; then
                shift 1
            else
                return 1
            fi
        ;;
        --directory=*)
            ! set_option_two_dash directory "$@" && return 1
        ;;
        -t)
            if set_option_one_dash tag "$@"; then
                shift 1
            else
                return 1
            fi
        ;;
        --tag=*)
            ! set_option_two_dash tag "$@" && return 1
        ;;
        -s)
            if set_option_one_dash start "$@"; then
                shift 1
            else
                return 1
            fi
        ;;
        --start=*)
            ! set_option_two_dash start "$@" && return 1
        ;;
        -e)
            if set_option_one_dash end "$@"; then
                shift 1
            else
                return 1
            fi
        ;;
        --end=*)
            ! set_option_two_dash end "$@" && return 1
        ;;
        *)
            print_error "$1 not recognized"
            return 1
        ;;
    esac
    shift 1
done

if [ -n "$directory" ]; then
    if [ -d "$directory" ]; then
        cd "$directory" || return 1
    else
        print_error "$directory is not a directory"
        return 1
    fi
fi

program="zat"
if [ -n "$tag" ]; then
    if is_number "$tag"; then
        program="$program $tag"
    else
        return 1
    fi
fi

if [ -z "$start" ] && [ -z "$end" ]; then
    files="$(fd --type file --type symlink --exact-depth 1)"
    for file in $files; do
        open_file "$program" "$file"
    done
elif [ -n "$end" ]; then
    ! is_number "$end" && return 1

    [ -z "$start" ] && start=0

    ! is_number "$start" && return 1

    if [ "$start" -gt "$end" ]; then
        print_error "end should be greater than start"
        return 1
    fi

    current="$start"
    while [ "$current" -le "$end" ]; do
        find_open_file "$current" "$program"
        current="$(( current + 1 ))"
    done
elif [ -n "$start" ]; then
    ! is_number "$start" && return 1

    # when end is not set but start is, open numbered files from start
    # until a file that starts with current number does not exist
    # 0 may or may not exists
    if [ "$start" -eq 0 ]; then
        find_open_file "$start" "$program"
        start="$(( start + 1 ))"
    fi

    current="$start"
    while find_open_file "$current" "$program"; do
        current="$(( current + 1 ))"
    done
else
    print_error "unreachable code"
    return 1
fi
