#!/bin/sh

package_names=$(cat << EOF
all
octave
sundials
epstool
biglybt
jna
amule
wxwidgets
fontpreview
lsix
gn
lua-language-server
ziget
zigup
zls
river
waybar
EOF
)

print_info=$(cat << EOF
possible first parameter: install update
possible second parameter:
$package_names
EOF
)

end="false"

if [ "$#" -ne 2 ]; then
	echo "illegal number of parameters: $#"
	end="true"
fi

if [ "$#" -lt 1 ]; then
    echo "$print_info"
    return 1
fi

if [ ! "$1" = "install" ] && [ ! "$1" = "update" ]; then
	echo "wrong first parameter: $1"
	end="true"
fi

if [ "$#" -eq 1 ]; then
	echo "$print_info"
	return 1
fi

found="false"
while read -r param; do
    if [ "$2" = "$param" ]; then
        found="true"
        break
    fi
done <<EOT
$package_names
EOT
if [ "$found" = "false" ]; then
    echo "wrong second parameter: $2"
    echo "package not available"
	end="true"
fi

if [ "$end" = "true" ]; then
	echo "$print_info"
	return 1
fi

if [ "$1" = "install" ]; then
    echo "installing package: $2"
elif [ "$1" = "update" ]; then
    echo "updating package: $2"
fi

# useless: cd in scripts does not change acutal directory
# current_dir="$(pwd)"

prefix_dir="$HOME/.local"
	
dev="$HOME/dev/program"

mkdir -p "$dev"

### octave
# https://wiki.octave.org/Building
if [ "$2" = "all" ] || [ "$2" = "octave" ]; then
    if [ "$1" = "install" ]; then
        # hg clone https://www.octave.org/hg/octave "$dev/octave"
        hg clone https://hg.savannah.gnu.org/hgweb/octave "$dev/octave"

        # mkdir "$dev/octave/download"
        # mkdir "$dev/octave/home"
        # mkdir "$dev/octave/install"
    fi

    cd "$dev/octave" || return 1

    if [ "$1" = "install" ]; then
        ./bootstrap
        mkdir .build
    fi

    # octave_version=$(curl -L https://ftpmirror.gnu.org/octave | grep href=\"octave- | \
    #     tail -n 2 | head -n 1 | sed 's/^.*<a href="octave-//' | sed 's/">octave-.*$//')

    if [ "$1" = "update" ]; then
        hg pull
    fi

    cd .build || return 1

    ./../configure --with-blas=openblas --with-lapack=lapack --without-qt --without-x --prefix="$prefix_dir"

    make -j8

    if [ "$1" = "install" ]; then
        make check
    fi

    make install
fi

### sundials
# https://computing.llnl.gov/projects/sundials
if [ "$2" = "all" ] || [ "$2" = "sundials" ]; then
    if [ "$1" = "install" ]; then
        git clone --recurse-submodules https://github.com/LLNL/sundials.git "$dev/sundials"

        mkdir "$dev/sundials/instdir"
        mkdir "$dev/sundials/builddir"
    fi

    cd "$dev/sundials" || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    cd builddir || return 1

    doas cmake -DEXAMPLES_INSTALL_PATH="$dev/sundials/instdir/examples" \
        -DCMAKE_BUILD_TYPE=Release \
        -DENABLE_KLU=ON -DKLU_INCLUDE_DIR=/usr/include -DKLU_LIBRARY_DIR=/usr/lib  \
        -DENABLE_LAPACK=ON -DLAPACK_LIBRARIES="/usr/lib/liblapack.so;/usr/lib/libopenblas.so" \
        -DENABLE_PTHREAD=ON -DSUPERLUMT_THREAD_TYPE=Pthread \
        ../
        # -DENABLE_OPENMP=ON -DENABLE_OPENMP_DEVICE=ON -DSUPERLUMT_THREAD_TYPE=OpenMP \
        # -DENABLE_SUPERLUMT=ON -DSUPERLUMT_INCLUDE_DIR=/usr/include -DSUPERLUMT_LIBRARY_DIR=/usr/lib \

    doas make install
fi

### epstool
# http://www.ghostgum.com.au/software/epstool.htm
if [ "$2" = "all" ] || [ "$2" = "epstool" ]; then
    if [ "$1" = "install" ]; then
        mkdir "$dev/epstool"
    fi

    cd "$dev/epstool" || return 1

    epstool_version=$(curl -L http://www.ghostgum.com.au/software/epstool.htm | grep epstool- | grep .tar.gz | sed 's/^.*href="..\/download\/epstool-//' | sed 's/\.tar\.gz">.*$//')

    if [ ! -d "$dev/epstool/$epstool_version" ]; then
        mkdir "$dev/epstool/$epstool_version"
        curl -L "http://www.ghostgum.com.au/download/epstool-$epstool_version.tar.gz" | tar -x -z --strip-components=1 -C "$dev/epstool/$epstool_version"

        cd "$dev/epstool/$epstool_version" || return 1

        # strange permissions
        chmod 755 doc src srcwin
        chmod 644 LICENCE epstool.txt
        chmod 755 makefile

        doas make -j8 install
    else
        echo "no updates available"
    fi
fi

### biglybt
# https://github.com/BiglySoftware/BiglyBT
if [ "$2" = "all" ] || [ "$2" = "biglybt" ]; then
    if [ "$1" = "install" ]; then
        git clone --recurse-submodules https://github.com/BiglySoftware/BiglyBT "$dev/biglybt"

        mkdir "$dev/biglybt/download"
        mkdir "$dev/biglybt/home"
        mkdir "$dev/biglybt/install"
    fi

    cd "$dev/biglybt" || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    version=$(curl -s https://api.github.com/repos/BiglySoftware/BiglyBT/releases | grep html_url | head -n 1 | awk '{ print $2 }' | sed 's/^.*"https:\/\/github.com\/BiglySoftware\/BiglyBT\/releases\/tag\///' | sed 's/".*$//')

    script_name="biglybt-$version"

    if [ ! -f "$dev/biglybt/download/$script_name" ]; then
        biglybt_location=$(curl -s https://api.github.com/repos/BiglySoftware/BiglyBT/releases | grep GitHub_BiglyBT_Installer.sh | grep browser_download_url | head -n 1 | awk '{ print $2 }' | sed 's/,$//' | sed 's/"//g')

        curl -L "$biglybt_location" -o "$dev/biglybt/download/$script_name"

        chmod a+x "$dev/biglybt/download/$script_name"

        # java_home_subpath=$(readlink /usr/bin/java | sed 's/^.*\.\.\///' | sed 's/\/bin\/java.*$//')

        # export app_java_home="/usr/$java_home_subpath"

        # export HOME="$dev/biglybt/home"

        # export SUDO_USER="$USER"

        install_dir="$dev/biglybt/install/$version"

        doas sh "$dev/biglybt/download/$script_name" -dir "$install_dir"

        # error when running
        # SWT check failed with: org.eclipse.swt.SWTError: No more handles [gtk_init_check() failed]
    else
        echo "no updates available"
    fi
fi

### jna
# https://github.com/java-native-access/jna
if [ "$2" = "all" ] || [ "$2" = "jna" ]; then
    if [ "$1" = "install" ]; then
        git clone --recurse-submodules https://github.com/java-native-access/jna.git "$dev/jna"

        mkdir "$dev/jna/download"
    fi

    cd "$dev/jna" || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    version=$(curl -s https://github.com/java-native-access/jna/tags | grep jna/releases/tag | head -n 1 | sed 's/^.*jna\/releases\/tag\///' | sed 's/".*$//')
    
    jna_name="jna-$version.jar"

    if [ ! -f "$dev/jna/download/$jna_name" ]; then
        curl -L "https://repo1.maven.org/maven2/net/java/dev/jna/jna/$version/jna-$version.jar" -o "$dev/jna/download/$jna_name"

        doas install -Dm775 "$dev/jna/download/$jna_name" "/usr/share/java/jna.jar"
    else
        echo "no updates available"
    fi
fi

### amule
# https://wiki.amule.org/wiki/Compilation_Installation
# https://wiki.amule.org/t/index.php?title=Requirements
if [ "$2" = "all" ] || [ "$2" = "amule" ]; then
    if [ "$1" = "install" ]; then
        git clone --recurse-submodules https://github.com/amule-project/amule.git "$dev/amule"
    fi

    cd "$dev/amule" || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    # requires autopoint (gettext-devel)
    ./autogen.sh

    # no gui
    # ./configure --disable-debug --enable-optimize --enable-mmap --disable-monolithic --enable-amule-daemon --enable-amulecmd --enable-webserver --enable-cas --enable-alcc --enable-fileview --enable-geoip

    # gui
    ./configure --disable-debug --enable-optimize --enable-mmap --enable-amule-daemon --enable-amulecmd --enable-webserver --enable-amule-gui --enable-cas --enable-wxcas --enable-alc --enable-alcc --enable-xas --enable-fileview --enable-geoip

    ## if errors when building
    # /usr/local/include/wx-3.1/wx/tbarbase.h
    #   line 547 change: const wxBitmap& to: const auto&
    doas make -j8 install

    ## if errors when running
    # cd "$dev"/wxwidgets
    # src/common/sizer.cpp
    #   comment: define ASSERT_NO_IGNORED_FLAGS
    # src/common/socketiohandler.cpp
    #   comment: wxCHECK_RET
    # doas make -j8 install
    # doas ldconfig
fi

### wxwidgets
# https://github.com/wxWidgets/wxWidgets/blob/master/docs/gtk/install.md
if [ "$2" = "all" ] || [ "$2" = "wxwidgets" ]; then
    if [ "$1" = "install" ]; then
        git clone --recurse-submodules https://github.com/wxWidgets/wxWidgets.git "$dev/wxwidgets"
    fi

    cd "$dev/wxwidgets" || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    # requires autopoint (gettext-devel)
    ./autogen.sh

    # no gui
    # ./configure --enable-unicode --enable-optimise --disable-gui

    # gui
    ./configure --enable-unicode --enable-optimise

    doas make -j8 install

    doas ldconfig
fi

### fontpreview
# https://github.com/sdushantha/fontpreview
if [ "$2" = "all" ] || [ "$2" = "fontpreview" ]; then
    if [ "$1" = "install" ]; then
        git clone --recurse-submodules https://github.com/sdushantha/fontpreview.git "$dev/fontpreview"
    fi

    cd "$dev/fontpreview" || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    doas make -j8 install
fi

### lsix
# https://github.com/hackerb9/lsix
if [ "$2" = "all" ] || [ "$2" = "lsix" ]; then
    if [ "$1" = "install" ]; then
        git clone --recurse-submodules https://github.com/hackerb9/lsix.git "$dev/lsix"
    fi

    cd "$dev/lsix" || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    doas install -Dm775 "$dev/lsix/lsix" /usr/local/bin/
fi

### gn
# https://gn.googlesource.com/gn
if [ "$2" = "all" ] || [ "$2" = "gn" ]; then
    if [ "$1" = "install" ]; then
        git clone --recurse-submodules https://gn.googlesource.com/gn "$dev/gn-google"
    fi

    cd "$dev"/gn-google || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    python build/gen.py

    ninja -C out

    # to run tests
    # out/gn_unittests

    if [ "$1" = "install" ]; then
        doas ln -s "$dev"/gn-google/out/gn /usr/local/bin/
    fi
fi

### lua-language-server
# https://github.com/sumneko/lua-language-server/wiki/Build-and-Run
if [ "$2" = "all" ] || [ "$2" = "lua-language-server" ]; then
    if [ "$1" = "install" ]; then
        git clone --recurse-submodules https://github.com/sumneko/lua-language-server.git "$dev/lua-language-server"
    fi

    cd "$dev"/lua-language-server || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    # prevent lua-language-server from writing .bashrc
    chmod u-w "$HOME"/.bashrc

    cd "$dev"/lua-language-server/3rd/luamake || return 1

    ./compile/install.sh

    cd "$dev"/lua-language-server || return 1

    ./3rd/luamake/luamake rebuild

    # unlock .bashrc
    chmod u+w "$HOME"/.bashrc

    # directory used in kak-lsp/kak-lsp.toml
    if [ "$1" = "install" ]; then
        doas ln -s "$dev"/lua-language-server/bin/Linux /usr/local/lib/lua-language-server
    fi
fi

### ziget
if [ "$2" = "all" ] || [ "$2" = "ziget" ]; then
    if [ "$1" = "install" ]; then
    	git clone --recurse-submodules https://github.com/marler8997/ziget.git "$dev/ziget"
    fi

    cd "$dev"/ziget || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    rm -rf zig-cache

    zig-master build -Drelease-safe -Dfetch --prefix "$prefix_dir" install
fi

### zigup
if [ "$2" = "all" ] || [ "$2" = "zigup" ]; then
    if [ "$1" = "install" ]; then
    	git clone --recurse-submodules https://github.com/marler8997/zigup.git "$dev/zigup"
    fi

    cd "$dev"/zigup || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    rm -rf zig-cache

    zig-master build -Drelease-safe -Dfetch --prefix "$prefix_dir" install

    ## update with normal zig installed
    # set path-link to a directory that does not exist so it does not automatically link
    # zigup --install-dir "$XDG_LIB_HOME/zig" --path-link "does-not-exist" master
    # then manually link zig-master
    # ln -s "$XDG_LIB_HOME/zig/{version}/files/zig" "$XDG_BIN_HOME/zig-master"

    ## update without normal zig installed
    # zigup --install-dir "$XDG_LIB_HOME/zig" --path-link "$XDG_BIN_HOME" master
    # then manually link zig if it fails
    # ln -s "$XDG_LIB_HOME/zig/{version}/files/zig" "$XDG_BIN_HOME/zig"
fi

### zls
if [ "$2" = "all" ] || [ "$2" = "zls" ]; then
    if [ "$1" = "install" ]; then
    	git clone --recurse-submodules https://github.com/zigtools/zls.git "$dev/zls"
    fi

    cd "$dev"/zls || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    rm -rf zig-cache

    # zig_version="$(xbps-query zig | grep pkgver | awk '{ print $2 }' | sed 's/zig-//g' | sed 's/_.//g')"

    # zig-master build -Drelease-safe -Ddata_version="$zig_version" --prefix "$prefix_dir" install
    zig-master build -Drelease-safe --prefix "$prefix_dir" install
fi

### river
if [ "$2" = "all" ] || [ "$2" = "river" ]; then
    if [ "$1" = "install" ]; then
    	git clone --recurse-submodules https://github.com/ifreund/river.git "$dev/river"
    fi

    cd "$dev"/river || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    rm -rf zig-cache

    # -Dxwayland for xwayland support
    zig build -Drelease-safe -Dman-pages --prefix "$prefix_dir" install
    # zig build -Drelease-safe -Dman-pages -Dxwayland --prefix $prefix_dir install
fi

### waybar
if [ "$2" = "all" ] || [ "$2" = "waybar" ]; then
    if [ "$1" = "install" ]; then
    	git clone --recurse-submodules https://github.com/Alexays/Waybar.git "$dev/waybar"
    fi

    cd "$dev"/waybar || return 1

    if [ "$1" = "update" ]; then
        git pull --recurse-submodules
    fi

    # build options enabled/disabled
    meson --reconfigure -Dprefix="$prefix_dir" -Dlibnl=enabled -Dlibudev=enabled -Dlibevdev=enabled -Dpulseaudio=enabled -Dsystemd=disabled -Ddbusmenu-gtk=disabled -Dman-pages=enabled -Dmpd=disabled -Dgtk-layer-shell=disabled -Drfkill=enabled -Dsndio=disabled -Dtests=disabled build

    ninja -C build install
fi

### qrupdate

# https://sourceforge.net/projects/qrupdate
# FFLAGS add -fallow-argument-mismatch
# BLAS=-lopenblas
# if ldconfig works and ld -lqrupdate return something
# LIBDIR=lib/qrupdate

# useless: cd in scripts does not change acutal directory
# cd "$current_dir" || return 1
