#!/bin/sh

package_names=$(cat << EOF
all
qrupdate
epstool
sundials
octave
jna
biglybt
wxwidgets
amule
fontpreview
lsix
gn
lua-language-server
ziget
zigup
zls
llvm
zig
wayland
wlroots
river
waybar
fuzzel
epoll-shim
foot
EOF
)

print_info=$(cat << EOF
SYNOPSIS
        build-packages [OPTION]... PACKAGE_NAME

DESCRIPTION
        build packages from source

        -d, --dependencies
            build also dependencies (default)

        -c, --no-dependencies
            do not build dependencies
            by default it also builds dependencies

        -h, --help
            print this info and exit

PACKAGES AVAILABLE:

all means all packages

$package_names
EOF
)

if [ "$#" -lt 1 ]; then
    echo "error: no parameters"
    echo
	echo "$print_info"
	return 1
fi

dep=true

for param in "$@"; do
    if [ "$param" = "-h" ] || [ "$param" = "--help" ]; then
    	echo "$print_info"
    	return 0
    elif [ "$param" = "-d" ] || [ "$param" = "--dependencies" ]; then
        dep=true
    elif [ "$param" = "-c" ] || [ "$param" = "--no-dependencies" ]; then
        dep=false
    else
        found="false"
        while read -r pack; do
            if [ "$param" = "$pack" ]; then
                found="true"
                break
            fi
        done <<EOT
$package_names
EOT
        if [ "$found" = "true" ]; then
            package="$pack"
            break
        else
            echo "wrong parameter: $1"
            echo "package not available"
            echo
        	echo "$print_info"
        	return 1
        fi
    fi
done

prefix_dir_global="/usr/local"

prefix_dir="$HOME/.local"

dev="$HOME/dev/package"

mkdir -p "$dev"

### qrupdate
# https://sourceforge.net/projects/qrupdate
qrupdate_install() {
    echo "installing package: qrupdate"

    if [ ! -d "$dev/qrupdate" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        mkdir "$dev/qrupdate"
    fi

    cd "$dev/qrupdate" || return 1

    qrupdate_version=$(curl -s https://sourceforge.net/projects/qrupdate/files/latest/download | grep qrupdate | sed 's/^.*https\:\/\/downloads\.sourceforge\.net\/project\/qrupdate\/qrupdate\///' | sed 's/^.*qrupdate-//' | sed 's/\.tar\.gz.*$//')

    if [ ! -d "$qrupdate_version" ]; then
        mkdir "$qrupdate_version"

        curl -L -o "download.tar.gz" https://sourceforge.net/projects/qrupdate/files/latest/download
        tar -x -z --strip-components=1 -f "download.tar.gz" -C "$qrupdate_version"
        rm "download.tar.gz"

        cd "$qrupdate_version" || return 1

        # if ldconfig works and ld -lqrupdate return something
        # LIBDIR=lib/qrupdate

cat << EOF > makeconf.patch
4c4
< FFLAGS=-fimplicit-none -O3 -funroll-loops
---
> FFLAGS=-fimplicit-none -O3 -funroll-loops -fallow-argument-mismatch
9c9
< BLAS=-lblas
---
> BLAS=-lopenblas
18c18
< LIBDIR=lib
---
> LIBDIR=lib/qrupdate
EOF

        cp Makeconf Makeconf-saved

        patch Makeconf makeconf.patch

        make -j8 lib
        make -j8 solib
        make -j8 test

        doas make -j8 install

        doas ln -sf /usr/local/lib/qrupdate/* /usr/lib

        doas ldconfig
    else
        echo "no updates available"
    fi
}

### epstool
# http://www.ghostgum.com.au/software/epstool.htm
epstool_install() {
    echo "installing package: epstool"

    if [ ! -d "$dev/epstool" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        mkdir "$dev/epstool"
    fi

    cd "$dev/epstool" || return 1

    epstool_version=$(curl -L http://www.ghostgum.com.au/software/epstool.htm | grep epstool- | grep .tar.gz | sed 's/^.*href="..\/download\/epstool-//' | sed 's/\.tar\.gz">.*$//')

    if [ ! -d "$epstool_version" ]; then
        mkdir "$epstool_version"
        curl -L "http://www.ghostgum.com.au/download/epstool-$epstool_version.tar.gz" | tar -x -z --strip-components=1 -C "$epstool_version"

        cd "$epstool_version" || return 1

        # strange permissions
        chmod 755 doc src srcwin
        chmod 644 LICENCE epstool.txt
        chmod 755 makefile

        doas make -j8 install
    else
        echo "no updates available"
    fi
}

### sundials
# https://computing.llnl.gov/projects/sundials
sundials_install() {
    echo "installing package: sundials"

    if [ ! -d "$dev/sundials" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://github.com/LLNL/sundials.git "$dev/sundials"
    fi

    cd "$dev/sundials" || return 1

    if [ "$action" = "install" ]; then
        mkdir "instdir"
        mkdir "builddir"
    fi

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    cd builddir || return 1

    doas cmake -DEXAMPLES_INSTALL_PATH="$dev/sundials/instdir/examples" \
        -DCMAKE_BUILD_TYPE=Release \
        -DENABLE_KLU=ON -DKLU_INCLUDE_DIR=/usr/include -DKLU_LIBRARY_DIR=/usr/lib  \
        -DENABLE_LAPACK=ON -DLAPACK_LIBRARIES="/usr/lib/liblapack.so;/usr/lib/libopenblas.so" \
        -DENABLE_PTHREAD=ON -DSUPERLUMT_THREAD_TYPE=Pthread \
        ../
        # -DENABLE_OPENMP=ON -DENABLE_OPENMP_DEVICE=ON -DSUPERLUMT_THREAD_TYPE=OpenMP \
        # -DENABLE_SUPERLUMT=ON -DSUPERLUMT_INCLUDE_DIR=/usr/include -DSUPERLUMT_LIBRARY_DIR=/usr/lib \

    doas make -j8 install
}

### octave
# https://wiki.octave.org/Building
octave_install() {
    if [ "$#" -eq 1 ] && [ "$1" = "dep" ]; then
        qrupdate_install "dep"
        epstool_install "dep"
        sundials_install "dep"
    fi

    echo "installing package: octave"

    if [ ! -d "$dev/octave" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        # hg clone https://www.octave.org/hg/octave "$dev/octave"
        hg clone https://hg.savannah.gnu.org/hgweb/octave "$dev/octave"
    fi

    cd "$dev/octave" || return 1

    # if [ "$action" = "install" ]; then
    #     mkdir "download"
    #     mkdir "home"
    #     mkdir "install"
    # fi

    if [ "$action" = "install" ]; then
        ./bootstrap
        mkdir .build
    fi

    # octave_version=$(curl -L https://ftp.gnu.org/gnu/octave | grep href=\"octave- | tail -n 1 | sed 's/^.*href=\"octave-//' | sed 's/\.tar\.xz\.sig.*$//')
    # octave_version=$(curl -L https://ftpmirror.gnu.org/octave | grep href=\"octave- | tail -n 2 | head -n 1 | sed 's/^.*<a href="octave-//' | sed 's/">octave-.*$//')

    if [ "$action" = "update" ]; then
        hg pull
    fi

    cd .build || return 1

    ./../configure --with-blas=openblas --with-lapack=lapack --without-qt --without-x --prefix="$prefix_dir"

    make -j8

    if [ "$action" = "install" ]; then
        make -j8 check
    fi

    make -j8 install
}

### jna
# https://github.com/java-native-access/jna
jna_install() {
    echo "installing package: jna"

    if [ ! -d "$dev/jna" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://github.com/java-native-access/jna.git "$dev/jna"
    fi

    cd "$dev/jna" || return 1

    if [ "$action" = "install" ]; then
        mkdir "download"
    fi

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    cd "download" || return 1

    version=$(curl -s https://github.com/java-native-access/jna/tags | grep jna/releases/tag | head -n 1 | sed 's/^.*jna\/releases\/tag\///' | sed 's/".*$//')

    jna_name="jna-$version.jar"

    if [ ! -f "$jna_name" ]; then
        curl -L -o "$jna_name" "https://repo1.maven.org/maven2/net/java/dev/jna/jna/$version/jna-$version.jar"

        doas install -Dm775 "$jna_name" "/usr/share/java/jna.jar"
    else
        echo "no updates available"
    fi
}

### biglybt
# https://github.com/BiglySoftware/BiglyBT
biglybt_install() {
    if [ "$#" -eq 1 ] && [ "$1" = "dep" ]; then
        jna_install "dep"
    fi

    echo "installing package: biglybt"

    if [ ! -d "$dev/biglybt" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://github.com/BiglySoftware/BiglyBT.git "$dev/biglybt"

        mkdir "$dev/biglybt/download"
        mkdir "$dev/biglybt/home"
        mkdir "$dev/biglybt/install"
    fi

    cd "$dev/biglybt" || return 1

    if [ "$action" = "install" ]; then
        mkdir "download"
        mkdir "home"
        mkdir "install"
    fi

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    cd "download" || return 1

    version=$(curl -s https://api.github.com/repos/BiglySoftware/BiglyBT/releases | grep html_url | head -n 1 | awk '{ print $1 }' | sed 's/^.*"https:\/\/github.com\/BiglySoftware\/BiglyBT\/releases\/tag\///' | sed 's/".*$//')

    script_name="biglybt-$version"

    if [ ! -f "$script_name" ]; then
        biglybt_location=$(curl -s https://api.github.com/repos/BiglySoftware/BiglyBT/releases | grep GitHub_BiglyBT_Installer.sh | grep browser_download_url | head -n 1 | awk '{ print $1 }' | sed 's/,$//' | sed 's/"//g')

        curl -L -o "$script_name" "$biglybt_location"

        chmod a+x "$script_name"

        # java_home_subpath=$(readlink /usr/bin/java | sed 's/^.*\.\.\///' | sed 's/\/bin\/java.*$//')

        # export app_java_home="/usr/$java_home_subpath"

        # export HOME="$dev/biglybt/home"

        # export SUDO_USER="$USER"

        install_dir="$dev/biglybt/install/$version"

        doas sh "$script_name" -dir "$install_dir"

        # error when running
        # SWT check failed with: org.eclipse.swt.SWTError: No more handles [gtk_init_check() failed]
    else
        echo "no updates available"
    fi
}

### wxwidgets
# https://github.com/wxWidgets/wxWidgets/blob/master/docs/gtk/install.md
wxwidgets_install() {
    echo "installing package: wxwidgets"

    if [ ! -d "$dev/wxwidgets" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://github.com/wxWidgets/wxWidgets.git "$dev/wxwidgets"
    fi

    cd "$dev/wxwidgets" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    # requires autopoint (gettext-devel)
    ./autogen.sh

    # no gui
    # ./configure --enable-unicode --enable-optimise --disable-gui

    # gui
    ./configure --enable-unicode --enable-optimise

    doas make -j8 install

    doas ldconfig
}

### amule
# https://wiki.amule.org/wiki/Compilation_Installation
# https://wiki.amule.org/t/index.php?title=Requirements
amule_install() {
    if [ "$#" -eq 1 ] && [ "$1" = "dep" ]; then
        wxwidgets_install "dep"
    fi

    echo "installing package: amule"

    if [ ! -d "$dev/amule" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://github.com/amule-project/amule.git "$dev/amule"
    fi

    cd "$dev/amule" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    # requires autopoint (gettext-devel)
    ./autogen.sh

    # no gui
    # ./configure --disable-debug --enable-optimize --enable-mmap --disable-monolithic --enable-amule-daemon --enable-amulecmd --enable-webserver --enable-cas --enable-alcc --enable-fileview --enable-geoip

    # gui
    ./configure --disable-debug --enable-optimize --enable-mmap --enable-amule-daemon --enable-amulecmd --enable-webserver --enable-amule-gui --enable-cas --enable-wxcas --enable-alc --enable-alcc --enable-xas --enable-fileview --enable-geoip

    ## if errors when building
    # /usr/local/include/wx-3.1/wx/tbarbase.h
    #   line 547 change: const wxBitmap& to: const auto&
    doas make -j8 install
    doas ldconfig

    ## if errors when running
    # cd "$dev"/wxwidgets
    # src/common/sizer.cpp line 251
    #   comment: define ASSERT_NO_IGNORED_FLAGS
    # src/common/socketiohandler.cpp line 50
    #   comment: wxCHECK_RET
    # doas make -j8 install
    # doas ldconfig
}

### fontpreview
# https://github.com/sdushantha/fontpreview
fontpreview_install() {
    echo "installing package: fontpreview"

    if [ ! -d "$dev/fontpreview" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://github.com/sdushantha/fontpreview.git "$dev/fontpreview"
    fi

    cd "$dev/fontpreview" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    doas make -j8 install
}

### lsix
# https://github.com/hackerb9/lsix
lsix_install() {
    echo "installing package: lsix"

    if [ ! -d "$dev/lsix" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://github.com/hackerb9/lsix.git "$dev/lsix"
    fi

    cd "$dev/lsix" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    doas install -Dm775 "$dev/lsix/lsix" /usr/local/bin/
}

### gn
# https://gn.googlesource.com/gn
gn_install() {
    echo "installing package: gn"

    if [ ! -d "$dev/gn" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://gn.googlesource.com/gn "$dev/gn"
    fi

    cd "$dev/gn" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    python build/gen.py

    ninja -C out

    # to run tests
    # out/gn_unittests

    if [ "$action" = "install" ]; then
        doas ln -s "$dev/gn/out/gn" /usr/local/bin/
    fi
}

### lua-language-server
# https://github.com/sumneko/lua-language-server/wiki/Build-and-Run
lua_language_server_install() {
    echo "installing package: lua-language-server"

    if [ ! -d "$dev/lua-language-server" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://github.com/sumneko/lua-language-server.git "$dev/lua-language-server"
    fi

    cd "$dev/lua-language-server" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    # prevent lua-language-server from writing .bashrc
    chmod u-w "$HOME"/.bashrc

    cd "3rd/luamake" || return 1

    ./compile/install.sh

    cd "$dev/lua-language-server" || return 1

    ./3rd/luamake/luamake rebuild

    # unlock .bashrc
    chmod u+w "$HOME"/.bashrc

    # directory used in kak-lsp/kak-lsp.toml
    if [ "$action" = "install" ]; then
        doas ln -s "$dev/lua-language-server/bin/Linux" /usr/local/lib/lua-language-server
    fi
}

### ziget
ziget_install() {
    echo "installing package: ziget"

    if [ ! -d "$dev/ziget" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://github.com/marler8997/ziget.git "$dev/ziget"
    fi

    cd "$dev/ziget" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    rm -rf zig-cache

    zig build -Drelease-safe -Dfetch --prefix "$prefix_dir" install
}

### zigup
zigup_install() {
    if [ "$#" -eq 1 ] && [ "$1" = "dep" ]; then
        ziget_install "dep"
    fi

    echo "installing package: zigup"

    if [ ! -d "$dev/zigup" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://github.com/marler8997/zigup.git "$dev/zigup"
    fi

    cd "$dev/zigup" || return 1

    # zig_version=$(curl -s https://api.github.com/repos/ziglang/zig/releases | grep -i tag_name | head -n 1 | sed 's/^.*\"tag_name\": \"//' | sed 's/\",.*$//')

    # zig_bootstrap="zig-bootstrap-$zig_version"

    # curl -L -o "$zig_bootstrap.tar.xz" "https://github.com/ziglang/zig/releases/download/$zig_version/$zig_bootstrap.tar.xz"

    # mkdir "$zig_bootstrap"

    # tar -x --xz --strip-components=1 -f "$zig_bootstrap.tar.xz" -C "$zig_bootstrap"

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    rm -rf zig-cache

    zig build -Drelease-safe -Dfetch --prefix "$prefix_dir" install

    ## update with normal zig installed
    # set path-link to a directory that does not exist so it does not automatically link
    # zigup --install-dir "$XDG_LIB_HOME/zig" --path-link "does-not-exist" master
    # then manually link zig-master
    # ln -s "$XDG_LIB_HOME/zig/{version}/files/zig" "$XDG_BIN_HOME/zig-master"

    ## update without normal zig installed
    # zigup --install-dir "$XDG_LIB_HOME/zig" --path-link "$XDG_BIN_HOME" master
    # then manually link zig if it fails
    # ln -s "$XDG_LIB_HOME/zig/{version}/files/zig" "$XDG_BIN_HOME/zig"
}

### zls
zls_install() {
    if [ "$#" -eq 1 ] && [ "$1" = "dep" ]; then
        zigup_install "dep"
    fi

    echo "installing package: zls"

    if [ ! -d "$dev/zls" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://github.com/zigtools/zls.git "$dev/zls"
    fi

    cd "$dev/zls" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    rm -rf zig-cache

    # zig_version="$(xbps-query zig | grep pkgver | awk '{ print $1 }' | sed 's/zig-//g' | sed 's/_.//g')"

    # zig build -Drelease-safe -Ddata_version="$zig_version" --prefix "$prefix_dir" install
    zig build -Drelease-safe --prefix "$prefix_dir" install
}

### llvm
# https://github.com/ziglang/zig/wiki/How-to-build-LLVM,-libclang,-and-liblld-from-source#posix
llvm_install() {
    echo "installing package: llvm"

    if [ ! -d "$dev/llvm" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
        git clone --recurse-submodules https://github.com/llvm/llvm-project "$dev/llvm"
    fi

    cd "$dev/llvm" || return 1

    if [ "$action" = "update" ]; then
        rm -rf llvm/build-release
        rm -rf lld/build-release
        rm -rf clang/build-release
        git pull --recurse-submodules
    fi

    git checkout release/13.x

    llvm_install_prefix="/usr/lib"
    llvm_prefix_path="/usr/lib"
    # llvm_install_prefix="/usr/local/lib/llvm13-release"
    # llvm_prefix_path="/usr/local/lib/llvm13-release"
    # llvm_install_prefix="$XDG_LIB_HOME/llvm13-release"
    # llvm_prefix_path="$XDG_LIB_HOME/llvm13-release"

    # LLVM
    cd llvm || return 1
    mkdir build-release
    cd build-release || return 1
    cmake .. \
        -DCMAKE_INSTALL_PREFIX="$llvm_install_prefix" \
        -DCMAKE_PREFIX_PATH="$llvm_prefix_path" \
        -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_LIBXML2=OFF \
        -G Ninja -DLLVM_PARALLEL_LINK_JOBS=1
    doas ninja install
    cd ../.. || return 1

    # LLD
    cd lld || return 1
    mkdir build-release
    cd build-release || return 1
    cmake .. \
        -DCMAKE_INSTALL_PREFIX="$llvm_install_prefix" \
        -DCMAKE_PREFIX_PATH="$llvm_prefix_path" \
        -DCMAKE_BUILD_TYPE=Release \
        -G Ninja -DLLVM_PARALLEL_LINK_JOBS=1 \
        -DCMAKE_CXX_STANDARD=17
    doas ninja install
    cd ../.. || return 1

    # clang
    cd clang || return 1
    mkdir build-release
    cd build-release || return 1
    cmake .. \
        -DCMAKE_INSTALL_PREFIX="$llvm_install_prefix" \
        -DCMAKE_PREFIX_PATH="$llvm_prefix_path" \
        -DCMAKE_BUILD_TYPE=Release \
        -G Ninja -DLLVM_PARALLEL_LINK_JOBS=1
    doas ninja install
    cd ../.. || return 1
}

### zig
# https://github.com/ziglang/zig/wiki/Building-Zig-From-Source
zig_install() {
    if [ "$#" -eq 1 ] && [ "$1" = "dep" ]; then
        llvm_install "dep"
    fi

    echo "installing package: zig"

    if [ ! -d "$dev/zig" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://github.com/ziglang/zig.git "$dev/zig"
    fi

    cd "$dev/zig" || return 1

    if [ "$action" = "update" ]; then
        rm -rf build
        git pull --recurse-submodules
    fi

    mkdir build

    cd build || return 1

    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$prefix_dir" ..

    make install
}

### wayland
wayland_install() {
    echo "installing package: wayland"

    if [ ! -d "$dev/wayland" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://gitlab.freedesktop.org/wayland/wayland.git "$dev/wayland"
    	git clone --recurse-submodules https://gitlab.freedesktop.org/wayland/wayland-protocols.git "$dev/wayland-protocols"
        git clone --recurse-submodules https://gitlab.freedesktop.org/wayland/wayland-utils.git "$dev/wayland-utils"
    fi

    cd "$dev/wayland" || return 1

    if [ "$action" = "update" ]; then
        rm -rf build
        git pull --recurse-submodules
    fi

    meson build/ --prefix="$prefix_dir"
    ninja -C build/ install

    cd "$dev/wayland-protocols" || return 1

    if [ "$action" = "update" ]; then
        rm -rf build
        git pull --recurse-submodules
    fi

    meson build/ --prefix="$prefix_dir"
    ninja -C build/ install

    cd "$dev/wayland-utils" || return 1

    if [ "$action" = "update" ]; then
        rm -rf build
        git pull --recurse-submodules
    fi

    meson build/ --prefix="$prefix_dir"
    ninja -C build/ install
}

### wlroots
wlroots_install() {
    if [ "$#" -eq 1 ] && [ "$1" = "dep" ]; then
        wayland_install "dep"
    fi

    echo "installing package: wlroots"

    if [ ! -d "$dev/wlroots" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://gitlab.freedesktop.org/wlroots/wlroots.git "$dev/wlroots"
    fi

    cd "$dev/wlroots" || return 1

    if [ "$action" = "update" ]; then
        rm -rf build
        git pull --recurse-submodules
    fi

    mkdir build

    meson \
        -Dxcb-errors=disabled -Dxwayland=disabled -Dexamples=false \
        -Drenderers="['vulkan']" -Dbackends="['drm', 'libinput']" \
        build/ --prefix="$prefix_dir"
    # ninja -C build/
    ninja -C build/ install
}

### river
river_install() {
    if [ "$#" -eq 1 ] && [ "$1" = "dep" ]; then
        wlroots_install "dep"
    fi

    echo "installing package: river"

    if [ ! -d "$dev/river" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://github.com/riverwm/river.git "$dev/river"
    fi

    cd "$dev/river" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    rm -rf zig-cache

    # -Dxwayland for xwayland support
    zig build -Drelease-safe -Dman-pages --prefix "$prefix_dir" install
    # zig build -Drelease-safe -Dman-pages -Dxwayland --prefix $prefix_dir install
}

### waybar
waybar_install() {
    echo "installing package: waybar"

    if [ ! -d "$dev/waybar" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://github.com/Alexays/Waybar.git "$dev/waybar"
    fi

    cd "$dev/waybar" || return 1

    if [ "$action" = "update" ]; then
        git pull --recurse-submodules
    fi

    # build options enabled/disabled

    if [ "$action" = "install" ]; then
        meson -Dprefix="$prefix_dir" \
            -Dlibnl=enabled -Dlibudev=enabled -Dlibevdev=enabled \
            -Dpulseaudio=enabled -Dsystemd=disabled -Ddbusmenu-gtk=disabled \
            -Dman-pages=enabled -Dmpd=disabled -Dgtk-layer-shell=disabled \
            -Drfkill=enabled -Dsndio=disabled -Dtests=disabled \
            build
    else
        meson --reconfigure -Dprefix="$prefix_dir" \
            -Dlibnl=enabled -Dlibudev=enabled -Dlibevdev=enabled \
            -Dpulseaudio=enabled -Dsystemd=disabled -Ddbusmenu-gtk=disabled \
            -Dman-pages=enabled -Dmpd=disabled -Dgtk-layer-shell=disabled \
            -Drfkill=enabled -Dsndio=disabled -Dtests=disabled \
            build
    fi

    ninja -C build install
}

### fuzzel
# https://codeberg.org/dnkl/fuzzel
fuzzel_install() {
    echo "installing package: fuzzel"

    if [ ! -d "$dev/fuzzel" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://codeberg.org/dnkl/fuzzel.git "$dev/fuzzel"
    fi

    cd "$dev/fuzzel" || return 1

    if [ "$action" = "update" ]; then
        rm -rf bld/release
        git pull --recurse-submodules
    fi

    mkdir -p bld/release

    cd bld/release || return 1

    meson --prefix="$prefix_dir" --buildtype=release \
        -Denable-cairo=enabled \
        -Dpng-backend=libpng \
        -Dsvg-backend=librsvg \
        ../..

    ninja

    ninja install
}

### epoll-shim
# https://github.com/jiixyj/epoll-shim
# just when on bsd
epoll_shim_install() {
    echo "installing package: epoll-shim"

    if [ ! -d "$dev/epoll-shim" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://github.com/jiixyj/epoll-shim.git "$dev/epoll-shim"
    fi

    cd "$dev/epoll-shim" || return 1

    if [ "$action" = "update" ]; then
        rm -rf build
        git pull --recurse-submodules
    fi

    mkdir build

    cd build || return 1

    cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo

    cmake --build .

    ctest --output-on-failure

    doas cmake --build . --target install
}

### foot
# https://codeberg.org/dnkl/foot/src/branch/master/INSTALL.md
foot_install() {
    # if [ "$#" -eq 1 ] && [ "$1" = "dep" ]; then
    #     epoll_shim_install "dep"
    # fi

    echo "installing package: foot"

    if [ ! -d "$dev/foot" ]; then
        action="install"
    else
        action="update"
    fi

    if [ "$action" = "install" ]; then
    	git clone --recurse-submodules https://codeberg.org/dnkl/foot.git "$dev/foot"
    fi

    cd "$dev/foot" || return 1

    if [ "$action" = "update" ]; then
        rm -rf bld/release
        git pull --recurse-submodules
    fi

    mkdir -p bld/release

    cd bld/release || return 1

    # change also below and in .config/kak/foot.kak
    # -Ddefault-terminfo=xterm
    # -Ddefault-terminfo=xterm-256color
    # -Ddefault-terminfo=alacritty

    export CFLAGS="$CFLAGS -O3"
	meson --buildtype=release -Dthemes=true --prefix="$prefix_dir_global" -Dterminfo=enabled -Db_lto=true ../..
	# meson --buildtype=release -Dthemes=true --prefix="$prefix_dir_global" -Dterminfo=enabled -Ddefault-terminfo=xterm-256color -Db_lto=true ../..
	meson configure -Db_pgo=generate
	ninja
	ninja test

	# --term=xterm
	# --term=xterm-256color
	# --term=alacritty

	./footclient --version
	foot_tmp_file=$(mktemp)
	./foot \
		--config=/dev/null \
		--override tweak.grapheme-shaping=no \
		--term=xterm \
		sh -c "$dev/foot/scripts/generate-alt-random-writes.py --scroll --scroll-region --colors-regular --colors-bright --colors-256 --colors-rgb --attr-bold --attr-italic --attr-underline --sixel ${foot_tmp_file} && cat ${foot_tmp_file}"
	rm "${foot_tmp_file}"

	meson configure -Db_pgo=use
	ninja
	ninja test
	doas ninja install

    cd "$dev/foot" || return 1

	# terminfo
	doas sed 's/@default_terminfo@/foot/g' foot.info | doas tic -x -e foot,foot-direct -
}

#### install packages

# substitute '-' with '_'
# posix shell does not support '-' inside function names
package="$(echo "$package" | sed 's/-/_/g')"

if [ "$package" = "all" ]; then
    while read -r pack; do
        eval "${pack}_install"
    done <<EOT
$package_names
EOT
else
    if [ "$dep" = "false" ]; then
        eval "${package}_install"
    else
        eval "${package}_install dep"
    fi
fi
