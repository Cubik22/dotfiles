#!/bin/sh

# add dotfiles bin to path
directories_path="$(find -L "$HOME/dotfiles/.local/bin" -type d -printf %p:)"
export PATH="${directories_path}${PATH}"
unset directories_path

# backup present configs
backup-dotfiles

# dotfiles
dotfiles_dir="$HOME/.dotfiles"
dotfiles_link="git@lbia.xyz:/var/www/git/dotfiles.git"
git clone --bare "$dotfiles_link" "$dotfiles_dir"
unset dotfiles_link

# private
private_dir="$HOME/.private"
private_link="git@lbia.xyz:/srv/git/private.git"
git clone --bare "$private_link" "$private_dir"
unset dotfiles_link

# create temporary alias
ucon () {
   /usr/bin/git --git-dir="$dotfiles_dir"/ --work-tree="$HOME" "$@"
}
pcon () {
   /usr/bin/git --git-dir="$private_dir"/ --work-tree="$HOME" "$@"
}

# backup of configs while copying files in the appropiate places
echo "checking out dotfiles"
ucon checkout

ucon config status.showUntrackedFiles no
ucon push --set-upstream origin main

# remove README from HOME and set git to not track in locale
rm -f "$HOME/README.md"
ucon update-index --assume-unchanged "$HOME/README.md"

echo "checking out private"
pcon checkout

pcon config status.showUntrackedFiles no
pcon config advice.addIgnoredFile false
pcon push --set-upstream origin main

# ssh directory
ssh_dir="$HOME/.ssh"
[ ! -d "$ssh_dir" ] && mkdir -p "$ssh_dir"
chmod 700 "$ssh_dir"
ssh_sockets="$ssh_dir/sockets"
[ ! -d "$ssh_sockets" ] && mkdir -p "$ssh_sockets"
chmod 700 "$ssh_sockets"
unset ssh_sockets
unset ssh_dir

# gnupg directory
gnupg_dir="$HOME/.config/gnupg"
[ ! -d "$gnupg_dir" ] && mkdir -p "$gnupg_dir"
chmod 700 "$gnupg_dir"
unset gnupg_dir

# directories
mkdir -p "$HOME/.local"
mkdir -p "$HOME/.local/share"
mkdir -p "$HOME/.local/lib"

mkdir -p "$HOME/.local/share/script"
mkdir -p "$HOME/.local/share/bash"
mkdir -p "$HOME/.local/share/kak"
mkdir -p "$HOME/.local/share/nvim"

mkdir -p "$HOME/.local/lib/zig"

link-config-root "/root/backup-bare"

# make sure R directories are created otherwise there may be problems
mkdir -p "$HOME/.local/share/R"
mkdir -p "$HOME/.local/lib/R"

# rustup cargo env
export RUSTUP_HOME="/usr/local/lib/rustup"
export CARGO_HOME="/usr/local/lib/cargo"

# set info
info_home="/etc/info"
doas mkdir -p "$info_home"
printf "operating system: "
read -r operating_system
echo "$operating_system" | doas tee "$info_home/operating-system" >/dev/null
printf "os type (desktop or server): "
read -r os_type
echo "$os_type" | doas tee "$info_home/os-type" >/dev/null
