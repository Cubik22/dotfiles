[server]
# exit session if no requests were received during given period in seconds
# works only in unix sockets mode (-s/--session)
# set to 0 to disable
timeout = 1800 # seconds = 30 minutes

[language.bash]
filetypes = ["sh"]
roots = [".git", ".hg"]
command = "bash-language-server"
args = ["start"]

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_commands.json", ".clangd", ".git", ".hg"]
command = "clangd"
#args = [ "--background-index", "--suggest-missing-includes", "--clang-tidy", "--fallback-style=LLVM"]
offset_encoding = "utf-8"

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "rls"
settings_section = "rust-analyzer"
[language.rust.settings.rust-analyzer]
# hoverActions.enable = false # kak-lsp doesn't support this at the moment
# # cargo.features = []
# # See https://rust-analyzer.github.io/manual.html#configuration
# # If you get 'unresolved proc macro' warnings, you have two options
# # 1. The safe choice is two disable the warning:
# diagnostics.disabled = ["unresolved-proc-macro"]
# # 2. Or you can opt-in for proc macro support
# procMacro.enable = true
# cargo.loadOutDirsFromCheck = true
# # See https://github.com/rust-analyzer/rust-analyzer/issues/6448

[language.zig]
filetypes = ["zig"]
roots = ["build.zig"]
command = "zls"

#[language.lua]
#filetypes = ["lua"]
#roots = [".git"]
#command = "lua-language-server"
#args = ["-E", "$HOME/.local/share/src/lsp/lua/main.lua"]

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "pyls"
offset_encoding = "utf-8"
workaround_server_sends_plaintext_labeled_as_markdown = true
settings_section = "_"
[language.python.settings._]
# See https://github.com/palantir/python-language-server#configuration
# and https://github.com/palantir/python-language-server/blob/develop/vscode-client/package.json
# pyls.configurationSources = ["flake8"]

[language.html]
filetypes = ["html"]
roots = ["package.json"]
command = "html-languageserver"
args = ["--stdio"]

[language.css]
filetypes = ["css"]
roots = ["package.json", ".git", ".hg"]
command = "css-languageserver"
args = ["--stdio"]

[language.json]
filetypes = ["json"]
roots = ["package.json"]
command = "json-languageserver"
args = ["--stdio"]

[language.javascript]
filetypes = ["javascript"]
roots = ["package.json"]
command = "language-server-stdio"

[language.typescript]
filetypes = ["typescript"]
roots = ["package.json", "tsconfig.json"]
command = "javascript-typescript-stdio"

# Semantic tokens support
# See https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_semanticTokens
# for the default list of tokens and modifiers.
# However, many language servers implement their own values.
# Make sure to check the output of `lsp-capabilities` and each server's documentation and source code as well.
# Examples:
# - TypeScript: https://github.com/microsoft/vscode-languageserver-node/blob/2645fb54ea1e764aff71dee0ecc8aceff3aabf56/client/src/common/semanticTokens.ts#L58
# - Rust Analyzer: https://github.com/rust-analyzer/rust-analyzer/blob/f6da603c7fe56c19a275dc7bab1f30fe1ad39707/crates/ide/src/syntax_highlighting.rs#L42

[[semantic_tokens]]
token = "comment"
face = "documentation"
modifiers = ["documentation"]

[[semantic_tokens]]
token = "comment"
face = "comment"

[[semantic_tokens]]
token = "function"
face = "function"

[[semantic_tokens]]
token = "keyword"
face = "keyword"

[[semantic_tokens]]
token = "namespace"
face = "module"

[[semantic_tokens]]
token = "operator"
face = "operator"

[[semantic_tokens]]
token = "string"
face = "string"

[[semantic_tokens]]
token = "type"
face = "type"

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["readonly"]

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["constant"]

[[semantic_tokens]]
token = "variable"
face = "variable"
