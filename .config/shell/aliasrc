#!/bin/bash
# aliasrc

# bat as manpager (set bat config)
#export MANPAGER="bat_man.sh"

# doas
alias d="doas"
alias sudo="doas"

# do not keep environment variables when su
alias su="su --login --whitelist-environment=WAYLAND_DISPLAY"

# ls
lsplus="ls --color=auto --group-directories-first --format=horizontal --human-readable"
alias ls="$lsplus"
alias la="$lsplus -a"
alias ll="$lsplus -l"
alias lal="$lsplus -a -l"
alias lla="$lsplus -l -a"
cdl () {
    cd "$@"
    eval "$lsplus"
}
alias trexa="exa --long --header --modified --git --tree --color=auto --icons --all --group-directories-first"

# color stuff
alias dir="dir --color=auto"
alias vdir="vdir --color=auto"
alias grep="grep --color=auto"
alias fgrep="fgrep --color=auto"
alias egrep="egrep --color=auto"
alias diff="diff --color=auto"
alias ip="ip -color=auto"

# confirm before overwriting something and verbose
alias mkdir="mkdir -pv"
alias cp="cp -r"
# alias mv='mv'
alias rm='echo "in order to move the file/directory in the trash use trash-put"; rm'

alias ..="cd .."
alias cd..="cd .."
alias space="du -sh"
alias n3="nnn"
alias nv="nvim"
alias ka="kak"
alias xq="xbps-query"
alias xs="xbps-query -s"
#alias chromium="ungoogled_chromium.sh"

# imv
alias imv="imv-wayland"

# wifi
alias iwdscan="iwctl station wlan0 scan;"

# bluetooth
alias bluescan="bluetoothctl scan on;"

# human-readable sizes
alias df='df -h'
# show sizes in MB
alias free='free -m'

# ps (current processes)
alias psa="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"
alias psmem='ps auxf | sort -nr -k 4'
alias pscpu='ps auxf | sort -nr -k 3'

# verify signature for isos
#alias gpg="gpg2"
alias gpg-check="gpg --keyserver-options auto-key-retrieve --verify"
# receive the key of a developer
alias gpg-retrieve="gpg --keyserver-options auto-key-retrieve --receive-keys"

# git related
alias gst="git status"
alias gad="git add"
alias gbr="git branch"
alias gcm="git commit"
alias gdf="git diff"
alias gfe="git fetch"
alias glg="git log"
alias gco="git checkout"
alias gps="rbw unlock; git push"
alias grb="git rebase"
alias gsa="git stash"
alias gpl="git pull"

# void mirrors in order to quickly change when one si slow (R flag)
mirror1="https://alpha.de.repo.voidlinux.org/current/musl"
mirror2="https://mirrors.servercentral.com/voidlinux/current/musl"
mirror3="https://alpha.us.repo.voidlinux.org/current/musl"

# print informations
phel () {
    echo "WIFI"
    echo "iwdscan"
    echo "iwctl station wlan0 show/scan/get-networks/(dis)connect"
    echo
    echo "BLUEZ"
    echo "blueon blueoff bluescan"
    echo "bluetoothctl default-agent/power on/scan on/trust <device>/connect <device>"
    echo
    echo "AUDIO"
    echo "amixer/alsamixer (alsa)"
    echo "pactl (pipewire)"
    echo
    echo "RUNIT"
    echo "ln -s /etc/sv/<service> /var/service/"
    echo "ln -s /etc/sv/<service> /etc/runit/runsvdir/default/"
    echo "touch /etc/sv/<service>/down"
    echo "servstat (info services)"
    echo
    echo "REMOVABLE DRIVE"
    echo "udisksctl (un)mount -b <drive (from lsblk)>"
    # TODO: expand print help
}

spa () {
	if [ "$#" -lt 2 ]; then
    	echo "insert at least two parameters"
    	echo "first parameter: tag"
    	echo "second parameter: program"
    	echo "following parameters (optional): arguments of program"
    	return 1
	fi
	tag="$1"
	program="$2"
	# shift arguments by two, now 3 becomes 0
	shift 2
    riverctl set-focused-tags "$((1 << ("$tag" - 1)))"
	eval '"$program" "$@" &'
}

zat () {
	if [ "$#" -lt 2 ]; then
    	echo "insert at least two parameters"
    	echo "first parameter: tag"
    	echo "other parameters: arguments"
    	return 1
	fi
    tag="$1"
	# shift arguments by two, now 3 becomes 0
	shift 1
    riverctl set-focused-tags "$((1 << ("$tag" - 1)))"
    zathura "$@" &
}

# before push unlock bitwarden
git () {
	if [ "$#" -ge 1 ] && [ "$1" = "push" ]; then
		rbw unlock
	fi
	/usr/bin/git "$@"
}

# git bare repository user dotfiles
ucon () {
	# when adding echo to remember to pull before commit
	if [ "$#" -ge 1 ]; then
		if [ "$1" = "add" ]; then
			echo "remember to pull before commit"
		elif [ "$1" = "push" ]; then
			rbw unlock
		fi
	fi
	local work_tree="$HOME"
	local git_dir="$HOME/.dotfiles"
	/usr/bin/git --git-dir="$git_dir"/ --work-tree="$work_tree" "$@"
	# when pulling remove README from work_tree and set git to not track in locale
	if [ "$#" -ge 1 ]; then
		if [ "$1" = "pull" ]; then
			/usr/bin/rm -f "$work_tree"/README.md
			/usr/bin/git --git-dir="$git_dir"/ --work-tree="$work_tree" update-index --assume-unchanged "$work_tree"/README.md
		fi
	fi
}

# git bare repository root config files
rcon () {
	# make sure that when running as user use doas
	if [ "$LOGNAME" = "root" ] || [ "$(id -u)" -eq 0 ]; then
		local as_root="true"
	else
		local as_root="false"
	fi
	# when adding echo to remember to pull before commit
	if [ "$#" -ge 1 ]; then
		if [ "$1" = "add" ]; then
			echo "remember to pull before commit"
		elif [ "$1" = "push" ]; then
			if [ "$as_root" = "true" ]; then
				rbw unlock
			else
				doas rbw unlock
			fi
		fi
	fi
	local work_tree="/"
	local git_dir="/root/config"
	if [ "$as_root" = "true" ]; then
		/usr/bin/git --git-dir="$git_dir"/ --work-tree="$work_tree" "$@"
	else
		doas /usr/bin/git --git-dir="$git_dir"/ --work-tree="$work_tree" "$@"
	fi
	# when pulling remove README from work_tree and set git to not track in locale
	if [ "$#" -ge 1 ]; then
		if [ "$1" = "pull" ]; then
			if [ "$as_root" = "true" ]; then
				/usr/bin/rm -f "$work_tree"/README.md
				/usr/bin/git --git-dir="$git_dir"/ --work-tree="$work_tree" update-index --assume-unchanged "$work_tree"/README.md
			else
				doas /usr/bin/rm -f "$work_tree"/README.md
				doas /usr/bin/git --git-dir="$git_dir"/ --work-tree="$work_tree" update-index --assume-unchanged "$work_tree"/README.md
			fi
		fi
	fi
}

# nnn audocd when pressing ^G
nnn () {
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, either remove the "export" as in:
    #    NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    #    (or, to a custom path: NNN_TMPFILE=/tmp/.lastd)
    # or, export NNN_TMPFILE after nnn invocation
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
    	. "$NNN_TMPFILE"
    	rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

# so the root can link and use this bashrc
if [ "$LOGNAME" = "root" ] || [ "$(id -u)" -eq 0 ]; then
    alias xbps-install="echo 'remember to add package to /etc/config'; xbps-install"
    alias xbps-remove="echo 'remember to remove package from /etc/config'; xbps-remove"
   	alias xi="echo 'remember to add package to /etc/config'; xbps-install"
    alias xr="echo 'remember to remove package from /etc/config'; xbps-remove"
	
	alias blueon="sv up bluetoothd; bluetoothctl power on;"
	alias blueoff="bluetoothctl power off; sv down bluetoothd;"

	alias servstat="sv status /var/service/*"
else
    alias xbps-install="echo 'remember to add package to /etc/config'; doas xbps-install"
    alias xbps-remove="echo 'remember to remove package from /etc/config'; doas xbps-remove"
    alias xi="echo 'remember to add package to /etc/config'; doas xbps-install"
    alias xr="echo 'remember to remove package from /etc/config'; doas xbps-remove"
	
	alias blueon="doas sv up bluetoothd; bluetoothctl power on;"
	alias blueoff="bluetoothctl power off; doas sv down bluetoothd;"

	alias servstat="doas sv status /var/service/*"

	alias poweroff="doas poweroff"
	alias reboot="doas reboot"

	alias dn3="doas nnn"
	alias dnv="doas nvim"
	alias dka="doas kak"
fi
