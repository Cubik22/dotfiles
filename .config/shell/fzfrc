#!/bin/bash

# fzfrc

possible_base_dir="/usr/share/fzf /usr/local/share/fzf/bash"
completion_file="completion.bash"
# key_bindings_file="key-bindings.bash"
for base_dir in $possible_base_dir; do
    if [ -d "$base_dir" ]; then
        # shellcheck disable=SC1090
        [ -f "$base_dir/$completion_file" ] && . "$base_dir/$completion_file"
        # copied file below without default keybindings
        # # shellcheck disable=SC1090
        # [ -f "$base_dir/$key_bindings_file" ] && . "$base_dir/$key_bindings_file"
        break
    fi
done
unset possible_base_dir
unset base_dir
unset completion_file
unset key_bindings_file

# use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - the first argument to the function ($1) is the base path to start traversal
# - see the source code (/usr/share/fzf/completion.bash) for the details.
# FZF_DEFAULT_COMMAND defined in .config/shell/envrc
_fzf_compgen_path() {
    $FZF_DEFAULT_COMMAND "$1"
}

# use fd to generate the list for directory completion
_fzf_compgen_dir() {
    $FZF_DEFAULT_COMMAND --type directory "$1"
}

# use fd to generate the list for file completion
_fzf_compgen_file() {
    $FZF_DEFAULT_COMMAND --type file "$1"
}

# see /usr/share/fzf/completion.bash adapting from _fzf_path_completion
_fzf_file_completion() {
    __fzf_generic_path_completion _fzf_compgen_file "-m" "" "$@"
}

# programs to be completed by file always
file_cmds_always="kak ka shellcheck checkbashisms"

for cmd in $file_cmds_always; do
    __fzf_defc "$cmd" _fzf_file_completion "-o default -o bashdefault"
done

# fzf complete for kak
# _fzf_setup_completion path kak
# _fzf_setup_completion path ka

# programs to be completed by file when non root
file_cmds_non_root="dkak dka"
if [ ! "$LOGNAME" = "root" ] && [ "$(id -u)" -ne 0 ]; then
    for cmd in $file_cmds_non_root; do
        __fzf_defc "$cmd" _fzf_file_completion "-o default -o bashdefault"
    done
    # fzf complete for kak as root
    # _fzf_setup_completion path dka
fi

## /usr/share/fzf/key-bindings.bash with little modifications and without bindings

__fzf_select__() {
  local cmd="${FZF_CTRL_T_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type f -print \
    -o -type d -print \
    -o -type l -print 2> /dev/null | cut -b3-"}"
  eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS --prompt \"${FZF_BEFORE_PROMPT}file: \"" $(__fzfcmd) -m "$@" | while read -r item; do
    printf '%q ' "$item"
  done
  echo
}

__fzfcmd() {
  [[ -n "$TMUX_PANE" ]] && { [[ "${FZF_TMUX:-0}" != 0 ]] || [[ -n "$FZF_TMUX_OPTS" ]]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

fzf-file-widget() {
  local selected
  selected="$(__fzf_select__ "$@" )"
  READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}"
  READLINE_POINT=$(( READLINE_POINT + ${#selected} ))
}

__fzf_cd__() {
  local cmd dir
  cmd="${FZF_ALT_C_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print 2> /dev/null | cut -b3-"}"
  dir=$(eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS --prompt \"${FZF_BEFORE_PROMPT}directory: \"" $(__fzfcmd) +m) && printf '%q' "$dir"
}

__fzf_history__() {
  local output
  # print $HISTCMD - $. . "\t$_" if !$seen{$_}++
  output=$(
    builtin fc -lnr -2147483648 |
      last_hist=$(HISTTIMEFORMAT='' builtin history 1) perl -n -l0 -e 'BEGIN { getc; $/ = "\n\t"; $HISTCMD = $ENV{last_hist} + 1 } s/^[ *]//; print "$_" if !$seen{$_}++' |
      FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort,ctrl-z:ignore $FZF_CTRL_R_OPTS +m --read0 --prompt \"${FZF_BEFORE_PROMPT}history: \"" $(__fzfcmd) --query "$READLINE_LINE"
  ) || return
  READLINE_LINE=${output#*$'\t'}
  if [[ -z "$READLINE_POINT" ]]; then
    echo "$READLINE_LINE"
  else
    READLINE_POINT=0x7fffffff
  fi
}

## personal

# alt-f search files
bind -m emacs-standard -x '"\ef": fzf-file-widget'
bind -m vi-command -x '"\ef": fzf-file-widget'
bind -m vi-insert -x '"\ef": fzf-file-widget'

# alt-h search history
bind -m emacs-standard -x '"\eh": __fzf_history__'
bind -m vi-command -x '"\eh": __fzf_history__'
bind -m vi-insert -x '"\eh": __fzf_history__'

# alt+s search scripts
_fzf_script() {
    local bin_home="${XDG_BIN_HOME:-$HOME/.local/bin}"
    local min_depth
    if [ ! "$OS_TYPE" = "server" ]; then
        min_depth=2
    else
        min_depth=1
    fi
        # --height="${FZF_TMUX_HEIGHT:-40%}" \
        # --layout=default \
    script="$( \
        $FZF_DEFAULT_COMMAND \
        --type file --type symlink \
        --min-depth="$min_depth" \
        --base-directory="$bin_home" | \
        fzf \
        --prompt "${FZF_BEFORE_PROMPT}script: " \
    )"
    [ -z "$script" ] && return 1
    # shellcheck disable=SC2088
    path="~/.local/bin/$script"
    total_lenght="$(( ${#path} + ${#READLINE_LINE} ))"
    READLINE_LINE="${READLINE_LINE}${path}"
    READLINE_POINT="$total_lenght"
}
bind -m emacs-standard -x '"\es": _fzf_script'
bind -m vi-command -x '"\es": _fzf_script'
bind -m vi-insert -x '"\es": _fzf_script'

# alt+c search configs
_fzf_config() {
    local config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
    local min_depth=1
        # --height="${FZF_TMUX_HEIGHT:-40%}" \
        # --layout=default \
    config="$( \
        $FZF_DEFAULT_COMMAND \
        --type file --type symlink \
        --min-depth="$min_depth" \
        --base-directory="$config_home" | \
        fzf \
        --prompt "${FZF_BEFORE_PROMPT}config: " \
    )"
    [ -z "$config" ] && return 1
    # shellcheck disable=SC2088
    path="~/.config/$config"
    total_lenght="$(( ${#path} + ${#READLINE_LINE} ))"
    READLINE_LINE="${READLINE_LINE}${path}"
    READLINE_POINT="$total_lenght"
}
bind -m emacs-standard -x '"\ec": _fzf_config'
bind -m vi-command -x '"\ec": _fzf_config'
bind -m vi-insert -x '"\ec": _fzf_config'

# see /usr/share/fzf/key-bindings.bash
# not really working with bash version > 4
# writes to prompt {directory}
# at least it is saved in bash history, with standard no
_fzf_cd_widget() {
    local directory
    directory="$(__fzf_cd__)"
    total_lenght="$(( ${#directory} + ${#READLINE_LINE} ))"
    READLINE_LINE="${READLINE_LINE}${directory}"
    READLINE_POINT="$total_lenght"
}
# alt+d search directories
bind -m emacs-standard -x '"\ed": _fzf_cd_widget'
bind -m vi-command -x '"\ed": _fzf_cd_widget'
bind -m vi-insert -x '"\ed": _fzf_cd_widget'

# https://github.com/junegunn/fzf/pull/2674
# https://unix.stackexchange.com/questions/573269/bash-is-there-a-way-to-invoke-bind-commands-e-g-redraw-current-line-programm
# _fzf_cd_widget() {
#     local cd_selected="$(__fzf_cd__)"
#     local selected="$(echo "$cd_selected" | sed 's/^.*cd //g')"
#     cd "$selected"
#     # eval "$cd_selected"
#     # pwd
#     # kill -WINCH "$$"
#     # killall bash
#     # echo "${PS1@P}"
#     # READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}"
#     # READLINE_POINT=$(( READLINE_POINT + ${#selected} ))
# }

# remap fzf <a-c> to <c-f>

# unmap alt+c
# bind -m emacs-standard '"\ec":'
# bind -m vi-command '"\ec":'
# bind -m vi-insert '"\ec":'

# bind -m emacs-standard '"\er": redraw-current-line'
# bind -m vi-command '"\er": redraw-current-line'
# bind -m vi-insert '"\er": redraw-current-line'

# bind -m emacs-standard '"\C-f": " \C-b\C-k \C-u`__fzf_cd__`\e\C-e\er\C-m\C-y\C-h\e \C-y\ey\C-x\C-x\C-d"'
# bind -m vi-command '"\C-f": "\C-z\C-f\C-z"'
# bind -m vi-insert '"\C-f": "\C-z\C-f\C-z"'

# bind -m emacs-standard '"\C-f": " \C-k \C-u$(__fzf_cd__)\er\C-m \C-y\C-x\C-x"'
# bind -m vi-command '"\C-f": "\C-z\C-f\C-z"'
# bind -m vi-insert '"\C-f": "\C-z\C-f\C-z"'

# bind -m emacs-standard -x '"\C-f": $(__fzf_cd__)'
# bind -m vi-command -x '"\C-f": $(__fzf_cd__)'
# bind -m vi-insert -x '"\C-f": $(__fzf_cd__)'

# map control+f
# bind -m emacs-standard -x '"\C-f": _fzf_cd_widget'
# bind -m vi-command -x '"\C-f": _fzf_cd_widget'
# bind -m vi-insert -x '"\C-f": _fzf_cd_widget'
