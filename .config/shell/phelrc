#!/bin/bash

# print informations
phel() {

subject_names="$(cat "${XDG_LOCAL_HOME:-$HOME/.local}/etc/script/phelrc")"

print_info=$(cat << EOF
SYNOPSIS
        phel [option]... subject [subject...]

DESCRIPTION
        print info about subjects

        -a, --all
            print info about all subjects

        -l, --list
            print list of subjects

        -h, --help
            print this info and exit

SUBJECTS AVAILABLE:

$subject_names
EOF
)

if [ "$#" -lt 1 ]; then
    echo "error: no parameters"
    echo
    echo "$print_info"
    return 1
fi

subjects=""

for param in "$@"; do
    if [ "$param" = "-h" ] || [ "$param" = "--help" ]; then
        echo "$print_info"
        return 0
    elif [ "$param" = "-l" ] || [ "$param" = "--list" ]; then
        echo "$subject_names"
        return 0
    elif [ "$param" = "-a" ] || [ "$param" = "--all" ]; then
        subjects="all"
        break
    else
        found="false"
        while read -r subj; do
            if [ "$param" = "$subj" ]; then
                found="true"
                break
            fi
        done <<EOT
$subject_names
EOT
        if [ "$found" = "true" ]; then
            subjects="$subjects $param"
        else
            echo "wrong parameter: $param"
            echo "subject not available"
            echo
            echo "$print_info"
            return 1
        fi
    fi
done

# shellcheck disable=SC2034
wifi_info=$(cat << EOF
## wifi
iwscan
iwctl station wlan0 show/scan/get-networks/(dis)connect
EOF
)

# shellcheck disable=SC2034
bluez_info=$(cat << EOF
## bluez
blueon blueoff bluescan
bluetoothctl default-agent/power on/scan on/trust <device>/connect <device>
# when connecting mouse
riverctl-set-input mouse
EOF
)

# shellcheck disable=SC2034
audio_info=$(cat << EOF
## audio
amixer/alsamixer (alsa)
pactl (pipewire)
ffmpeg -i {file.ext} {file.ogg}
{yt-dlp, youtube-dl} --ignore-errors --retries=infinite
    {--recode-video=ogg, --extract-audio {--audio-format=opus}}
    {{--embed-thumbnail} --add-metadata --xattrs}
    "<url>" -o "<name>.%(ext)s"
    -f, --format FORMAT
        Video format code, see the "FORMAT SELECTION" for all the info
    -F, --list-formats
        List all available formats of requested videos
ydlv
ydla
ydlvm
ydlam
EOF
)

# shellcheck disable=SC2034
runit_info=$(cat << EOF
## runit
ln -s /etc/sv/<service> /var/service/
ln -s /etc/sv/<service> /etc/runit/runsvdir/default/
touch /etc/sv/<service>/down
sv status /var/service/*
EOF
)

# shellcheck disable=SC2034
device_info=$(cat << EOF
## drive and device
mount (list mounted drives and devices)
dd if=/dev/{zero,urandom} of=/dev/sda bs=4M status=progress
cat <...>.iso | pv > /dev/sda
udisksctl {un}mount -b <drive (from lsblk)>
findmnt
EOF
)

# shellcheck disable=SC2034
compression_info=$(cat << EOF
## (de)compression
aunpack (atool)
tar -x -<compression options (-z)> {--strip-components=1} -C "<output dir>"
tar -c -<compression options (-z)> -f "<archived.tar.gz>" "<to-archive>"
EOF
)

# shellcheck disable=SC2034
update_info=$(cat << EOF
## update
xi -Su
update-extra all
build-packages all
EOF
)

# shellcheck disable=SC2034
git_info=$(cat << EOF
## git
git clone --recurse-submodules
git pull --recurse-submodules
git diff {--cached}
git rm -r {--cached}
git remote show origin
git config --get remote.origin.url
EOF
)

# shellcheck disable=SC2034
permission_info=$(cat << EOF
## permission
stat
# view the existing permissions of a file or directory in numeric form
stat -c %a "<name>"
default dir: 755
default file: 644
executable user: 744
executable all: 755
EOF
)

# shellcheck disable=SC2034
man_info=$(cat << EOF
## man
man {character} search
# searching
apropos whatis
# updating
mandb
makewhatis
tldr
EOF
)

# shellcheck disable=SC2034
lib_info=$(cat << EOF
## lib
ldconfig -v
ldconfig -n "${XDG_LIB_HOME:-$HOME/.local/lib}"
EOF
)

# shellcheck disable=SC2034
kernel_info=$(cat << EOF
## kernel
vkpurge list
vkpurge rm <kernel>
EOF
)

# shellcheck disable=SC2034
terminal_info=$(cat << EOF
## terminal
terminfo
stty
EOF
)

# shellcheck disable=SC2034
pdf_info=$(cat << EOF
## pdf
pdfunite <inputs>.pdf <output>.pdf
# repair pdf
pdftocairo -pdf <input>.pdf <output>.pdf
EOF
)

# shellcheck disable=SC2034
latex_info=$(cat << EOF
## latex
lualatex <...>.tex
EOF
)

# shellcheck disable=SC2034
font_info=$(cat << EOF
## font
fc-list
fc-cache -f -v
ttx <font-name>.<ttf,otf>
ttx <font-name>.<ttx>
EOF
)

# shellcheck disable=SC2034
log_info=$(cat << EOF
## log
dmesg
svlogd
EOF
)

# shellcheck disable=SC2034
debug_info=$(cat << EOF
## debug
strace
ltrace
EOF
)

# shellcheck disable=SC2034
file_info=$(cat << EOF
df -h
du -h
truncate
rsync
    {--human-readable, -h}
    {--verbose, -v}
    {--update, -u}
    {--archive, -a}
    {--compress, -z}
    {--partial --progress, -P}
    {--info=progress2}
    {--no-inc-recursive}
    <source> <dest>
EOF
)

# shellcheck disable=SC2034
util_info=$(cat << EOF
## util
watch
tee
tr
time
date cal
uname
pv
diff -u
ps -e
pidof
pgrep, pkill, pwait
ip {address}
crontab
croc
xbps-alternatives
wev
EOF
)

if [ "$subjects" = "all" ]; then
    while read -r subj; do
        eval "echo \"\$${subj}_info\""
        echo
    done <<EOT
$subject_names
EOT
else
    for subj in $subjects; do
        eval "echo \"\$${subj}_info\""
        echo
    done
fi

}
