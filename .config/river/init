#!/bin/sh

# get layout
layout="$(setting-get river-layout rivertile)" || return "$?"

# set the default layout generator, rivertile/rivercarro
# river will send the process group of the init executable SIGTERM on exit
riverctl default-layout "$layout"

### services

# wob
if [ -p "$WOB_PIPE" ] || [ -p "$WOB_PIPE_CENTER" ]; then
    killall wob
    rm -f "$WOB_PIPE"
    rm -f "$WOB_PIPE_CENTER"
fi
mkfifo "$WOB_PIPE"
mkfifo "$WOB_PIPE_CENTER"
tail -f "$WOB_PIPE" | wob --anchor "top" --anchor "right" &
tail -f "$WOB_PIPE_CENTER" | wob --anchor "center" --width 400 &
# tail -f "$WOB_PIPE_CENTER" | wob --anchor "center" --width 400 --height 400 &

# load brightness level
brightness_level="$(brightness-change load)"
echo "brightness level is: $brightness_level"

# scale everything (problems with partial scaling)
# wlr-randr --output eDP-1 --scale 1.25

### programs

# Gui + key used
# Delete Return Backspace Space
# [0-9] F11
# all letter keys taken

# Gui+Control+Space footclient
riverctl map normal Super+Control Space spawn "footclient-default"
# Gui+Control+Backspace footclient float
riverctl map normal Super+Control Backspace spawn "footclient-float"
# Gui+Control+Return footclient float fullscreen
riverctl map normal Super+Control Return spawn "footclient-float-fullscreen"

# Gui+S screenshot selection with grim and slurp
# shellcheck disable=SC2016
riverctl map normal Super S spawn 'screenshot selection; echo "100" > $WOB_PIPE_CENTER'
# Gui+Shift+S screenshot fullscreen with grim and slurp
# shellcheck disable=SC2016
riverctl map normal Super+Shift S spawn 'screenshot fullscreen; echo "100" > $WOB_PIPE_CENTER'
# old screenshot with grim and slurp
# shellcheck disable=SC2016
# riverctl map normal Super S spawn 'grim -g "$(slurp)" - | wl-copy-env'

# Gui+E edit clipboard
riverctl map normal Super E spawn "footclient-run --foot clipboard-edit"

# Gui+Z kak-fzf
riverctl map normal Super Z spawn "footclient-run --fzf fzf-kak"
# Gui+Shift+Z kak-fzf from root
riverctl map normal Super+Shift Z spawn "footclient-run --fzf fzf-kak --from-root"

# Gui+B menu bookmark options
riverctl map normal Super B spawn "footclient-run --fzf bookmark-menu"

# Gui+I iwctl
riverctl map normal Super I spawn "footclient-float iwctl"

# Gui+C bluetoothctl
riverctl map normal Super C spawn "footclient-float bluetoothctl"

# Gui+D disconnect
riverctl map normal Super D spawn "footclient-float disconnect"

# Gui+G menu
riverctl map normal Super G spawn "footclient-float menu-application --river"
# # Gui+G fuzzel
# riverctl map normal Super G spawn "fuzzel.sh"

# Gui+W weather
riverctl map normal Super W spawn "footclient-float --fzf weather-cli --less --home"

# Gui+A play copied url with mpv audio
# shellcheck disable=SC2016
riverctl map normal Super A spawn 'mpv-url --audio $(wl-paste-env)'
# Gui+V play copied url with mpv
# shellcheck disable=SC2016
riverctl map normal Super V spawn 'mpv-url $(wl-paste-env)'
# Gui+T play copied url with mpv with ytdl mode and medium quality
# shellcheck disable=SC2016
riverctl map normal Super T spawn 'mpv-url --medium $(wl-paste-env)'
# Gui+Shift+T play copied url with mpv with ytdl mode and worst quality
# shellcheck disable=SC2016
riverctl map normal Super+Shift T spawn 'mpv-url --worst $(wl-paste-env)'
# Gui+Control+T play copied url with mpv with ytdl mode and best quality
# shellcheck disable=SC2016
riverctl map normal Super+Control T spawn 'mpv-url --best $(wl-paste-env)'

# Gui+Y search and play invidious
riverctl map normal Super Y spawn "footclient-run --fzf play --river --invidious"
# Gui+Y search and play odysee
riverctl map normal Super O spawn "footclient-run --fzf play --river --odysee"

# Gui+R read file with zathura
riverctl map normal Super R spawn "footclient-run --fzf zat-fzf --river"
# Gui+Shift+R read directory with zathura
riverctl map normal Super+Shift R spawn "footclient-run --fzf zat-open-list-float-fullscreen-fzf --river"

# Gui+X open copied link with lynx
# shellcheck disable=SC2016
riverctl map normal Super X spawn 'footclient-wrap lynx $(wl-paste-env)'

# Gui+Shift+F firefox menu
riverctl map normal Super+Shift F spawn "footclient-float firefox-menu"

# Gui+Shift+C chromium menu
riverctl map normal Super+Shift C spawn "footclient-float chromium-menu"

### windows

# Gui+DoubleQuote move window mode
riverctl declare-mode move
riverctl map normal Super+Shift Apostrophe enter-mode move
riverctl map move None Escape enter-mode normal

# Gui+F11 passthrough mode. This mode has only a single mapping to return to
# normal mode. This makes it useful for testing a nested wayland compositor
riverctl declare-mode passthrough
riverctl map normal Super F11 enter-mode passthrough
riverctl map passthrough Super F11 enter-mode normal

# Gui+Shift+E to exit river
riverctl map normal Super+Shift E exit

for mode in normal move; do
    # Gui+J and Gui+K to focus the next/previous view in the layout stack
    riverctl map "$mode" Super J focus-view next
    riverctl map "$mode" Super K focus-view previous

    # Gui+H and Gui+L to swap the focused view with the previous/next
    # view in the layout stack
    riverctl map "$mode" Super H swap previous
    riverctl map "$mode" Super L swap next

    # Gui+Shift+J and Gui+Shift+K to increment/decrement the main count of rivertile/rivercarro
    riverctl map "$mode" Super+Shift J send-layout-cmd "$layout" "main-count +1"
    riverctl map "$mode" Super+Shift K send-layout-cmd "$layout" "main-count -1"

    # Gui+Shift+H and Gui+Shift+L to decrease/increase the main ratio of rivertile/rivercarro
    riverctl map "$mode" Super+Shift H send-layout-cmd "$layout" "main-ratio -0.025"
    riverctl map "$mode" Super+Shift L send-layout-cmd "$layout" "main-ratio +0.025"
done

# bitfield for all tags
all_tags="$(((1 << 32) - 1))"

# scratchpad
# https://github.com/ifreund/river/wiki/Scratchpad
scratch_tag="$((1 << 20 ))"

# set spawn tagmask to ensure new windows does not have the scratchpad tag unless explicitly set
all_but_scratch_tag="$(( ((1 << 32) - 1) ^ scratch_tag ))"
riverctl spawn-tagmask "$all_but_scratch_tag"

for mode in normal move; do
    case "$mode" in
        normal)
            key="Super"
        ;;
        move)
            key="None"
        ;;
    esac

    # Gui+Q to close the focused view
    riverctl map "$mode" "$key" Q close

    # Gui+Backspace focus previous tags
    riverctl map "$mode" "$key" Backspace focus-previous-tags

    # Gui+Shift+Backspace tag focused view with previous tags
    riverctl map "$mode" "$key"+Shift Backspace send-to-previous-tags

    # Gui+Return to bump the focused view to the top of the layout stack
    riverctl map "$mode" "$key" Return zoom

    for i in $(seq 1 9); do
        tags="$((1 << (i - 1)))"

        # Gui+[1-9] to focus tag [1-9]
        riverctl map "$mode" "$key" "$i" set-focused-tags "$tags"

        # Gui+Shift+[1-9] to tag focused view with tag [1-9]
        riverctl map "$mode" "$key"+Shift "$i" set-view-tags "$tags"

        # Gui+Control+[1-9] to toggle focus of tag [1-9]
        riverctl map "$mode" "$key"+Control "$i" toggle-focused-tags "$tags"

        # Gui+Control+Shift+[1-9] to toggle tag [1-9] of focused view
        riverctl map "$mode" "$key"+Control+Shift "$i" toggle-view-tags "$tags"
    done

    # Gui+0 to focus all tags
    # Gui+Shift+0 to tag focused view with all tags
    riverctl map "$mode" "$key" 0 set-focused-tags "$all_tags"
    riverctl map "$mode" "$key"+Shift 0 set-view-tags "$all_tags"

    # Gui+Delete toggle the scratchpad
    riverctl map "$mode" "$key" Delete toggle-focused-tags "$scratch_tag"

    # Gui+Shift+Delete send windows to the scratchpad
    riverctl map "$mode" "$key"+Shift Delete set-view-tags "$scratch_tag"

    # Gui+Space to toggle float
    riverctl map "$mode" "$key" Space toggle-float

    # Gui+F to toggle fullscreen
    riverctl map "$mode" "$key" F toggle-fullscreen

    # Gui+U set window float fullscreen (stacking mode)
    riverctl map "$mode" "$key" U spawn riverctl-float-fullscreen

    # Gui+{N,P} change tags
    riverctl map "$mode" "$key" N spawn "cycle-focused-tags next 9"
    riverctl map "$mode" "$key" P spawn "cycle-focused-tags previous 9"

    # Gui+Left Mouse Button to move views
    riverctl map-pointer "$mode" "$key" BTN_LEFT move-view

    # Gui+Right Mouse Button to resize views
    riverctl map-pointer "$mode" "$key" BTN_RIGHT resize-view

    # Gui+Control+{J,K,H,L} to change layout orientation
    riverctl map "$mode" "$key"+Control H send-layout-cmd "$layout" "main-location left"
    riverctl map "$mode" "$key"+Control J send-layout-cmd "$layout" "main-location bottom"
    riverctl map "$mode" "$key"+Control K send-layout-cmd "$layout" "main-location top"
    riverctl map "$mode" "$key"+Control L send-layout-cmd "$layout" "main-location right"

    # monocle just for rivercarro
    riverctl map "$mode" "$key" M send-layout-cmd rivercarro "main-location monocle"
done

# {H,J,K,L} to move views big step
# TODO: when moving to top move below bar
move_pixel_big=100
riverctl map move None H move left  "$move_pixel_big"
riverctl map move None J move down  "$move_pixel_big"
riverctl map move None K move up    "$move_pixel_big"
riverctl map move None L move right "$move_pixel_big"

# Shift+{H,J,K,L} to move views small step
move_pixel_small=20
riverctl map move Shift H move left  "$move_pixel_small"
riverctl map move Shift J move down  "$move_pixel_small"
riverctl map move Shift K move up    "$move_pixel_small"
riverctl map move Shift L move right "$move_pixel_small"

# Alt+{H,J,K,L} to snap views to screen edges
# when snapping to top move below bar
riverctl map move Alt H snap left
riverctl map move Alt J snap down
riverctl map move Alt K snap up
# riverctl map move Alt K spawn riverctl-snap-up-bar
riverctl map move Alt L snap right

# Movement+{H,J,K,L} to resize views big step
resize_pixel_big=100
riverctl map move None Left  resize horizontal "-$resize_pixel_big"
riverctl map move None Down  resize vertical   "$resize_pixel_big"
riverctl map move None Up    resize vertical   "-$resize_pixel_big"
riverctl map move None Right resize horizontal "$resize_pixel_big"

# Control+Shift+{H,J,K,L} to resize views small step
resize_pixel_small=20
riverctl map move Control+Shift H resize horizontal "-$resize_pixel_small"
riverctl map move Control+Shift J resize vertical   "$resize_pixel_small"
riverctl map move Control+Shift K resize vertical   "-$resize_pixel_small"
riverctl map move Control+Shift L resize horizontal "$resize_pixel_small"

# various media key mapping
for mode in normal locked; do
    # eject the optical drive
    riverctl map "$mode" None XF86Eject spawn 'eject -T'

    # control audio volume with alsa
    # for some reason -M option is not working
    # riverctl map "$mode" None XF86AudioRaiseVolume spawn "amixer -M set Master 5%+ | sed -En 's/.*\[([0-9]+)%\].*/\1/p' | head -1 > $WOB_PIPE"
    # riverctl map "$mode" None XF86AudioLowerVolume spawn "amixer -M set Master 5%- | sed -En 's/.*\[([0-9]+)%\].*/\1/p' | head -1 > $WOB_PIPE"
    # riverctl map "$mode" None XF86AudioMute spawn "amixer -M set Master toggle | sed -En '/\[on\]/ s/.*\[([0-9]+)%\].*/\1/ p; /\[off\]/ s/.*/0/p' | head -1 > $WOB_PIPE"

    # control microphone volume with alsa
    # for some reason -M option is not working
    # riverctl map "$mode" Shift XF86AudioRaiseVolume spawn "amixer -M set Capture 1%+ | sed -En 's/.*\[([0-9]+)%\].*/\1/p' | head -1 > $WOB_PIPE"
    # riverctl map "$mode" Shift XF86AudioLowerVolume spawn "amixer -M set Capture 1%- | sed -En 's/.*\[([0-9]+)%\].*/\1/p' | head -1 > $WOB_PIPE"
    # riverctl map "$mode" Shift XF86AudioMute spawn "amixer -M set Capture toggle | sed -En '/\[on\]/ s/.*\[([0-9]+)%\].*/\1/ p; /\[off\]/ s/.*/0/p' | head -1 > $WOB_PIPE"

    # control audio volume with pipewire
    riverctl map "$mode" None XF86AudioRaiseVolume spawn "pactl set-sink-volume @DEFAULT_SINK@ +5%; print-volume-pactl audio > $WOB_PIPE"
    riverctl map "$mode" None XF86AudioLowerVolume spawn "pactl set-sink-volume @DEFAULT_SINK@ -5%; print-volume-pactl audio > $WOB_PIPE"
    riverctl map "$mode" None XF86AudioMute spawn "pactl set-sink-mute @DEFAULT_SINK@ toggle; print-volume-mute-status-pactl audio > $WOB_PIPE"

    # control microphone volume with pipewire
    riverctl map "$mode" Shift XF86AudioRaiseVolume spawn "pactl set-source-volume @DEFAULT_SOURCE@ +5%; print-volume-pactl microphone > $WOB_PIPE"
    riverctl map "$mode" Shift XF86AudioLowerVolume spawn "pactl set-source-volume @DEFAULT_SOURCE@ -5%; print-volume-pactl microphone > $WOB_PIPE"
    riverctl map "$mode" Shift XF86AudioMute spawn "pactl set-source-mute @DEFAULT_SOURCE@ toggle; print-volume-mute-status-pactl microphone > $WOB_PIPE"

    # control MPRIS aware media players with playerctl
    riverctl map "$mode" None XF86AudioPrev  spawn 'playerctl previous'
    riverctl map "$mode" None XF86AudioNext  spawn 'playerctl next'
    riverctl map "$mode" None XF86AudioPlay  spawn 'playerctl play-pause'
    riverctl map "$mode" None XF86AudioStop  spawn 'playerctl stop'

    # brightness
    riverctl map "$mode" None XF86MonBrightnessUp   spawn "brightness-change up > $WOB_PIPE"
    riverctl map "$mode" None XF86MonBrightnessDown spawn "brightness-change down > $WOB_PIPE"

    # Gui+F12 poweroff
    riverctl map "$mode" Super F12 spawn "doas poweroff"
    # Gui+F10 reboot
    riverctl map "$mode" Super F10 spawn "doas reboot"
    # Gui+F9 zzz
    riverctl map "$mode" Super F9 spawn "doas zzz"
done

## colors

# background
riverctl background-color 0x1d2021
# foreground 4
riverctl border-color-focused 0xa89984
# background 2
riverctl border-color-unfocused 0x504945
# red normal
riverctl border-color-urgent 0xcc241d
# default
# riverctl border-color-focused 0x93a1a1
# riverctl border-color-unfocused 0x586e75

## options

# spawn new window in less important part
riverctl attach-mode bottom

# load border width from file so it can be read by other programs
riverctl border-width "$(border-width)"

# moving the cursor on another window change focus
riverctl focus-follows-cursor disabled
# riverctl focus-follows-cursor normal

# set repeat rate
riverctl set-repeat 100 250

# hide cursor
riverctl hide-cursor timeout 1000
riverctl hide-cursor when-typing enabled

# cursor theme
# remember to change also .config/shell/envrc
# remember to change also .config/gtk-{2, 3}.0/{config, settings.ini}
# remember to change also .icons/default/index.theme
riverctl xcursor-theme Adwaita 16
# riverctl xcursor-theme OpenZone_White 32
# riverctl xcursor-theme Human 32

# make certain views start floating
# set app-ids of views which should float
# <https://git.sr.ht/~leon_plickat/lswt>
riverctl float-filter-add app-id "float"
riverctl float-filter-add app-id "popup"
riverctl float-filter-add app-id "mpv"
riverctl float-filter-add app-id "imv"

# set app-ids and titles of views which should use client side decorations
# riverctl csd-filter-add app-id "gedit"

# set up touchpad with riverctl
riverctl-set-input touchpad

# run extra initializations
river-init-extra

# set volume and start programs
river-init-session &

# starting with runit
# TODO: /run is mounted noexec so can't use XDG_RUNTIME_DIR
svdir="/tmp/$(id -u)-sv-$WAYLAND_DISPLAY"

pgrep -f "^runsvdir $svdir" &&
    exec echo "runsvdir already running for wayland session"

# recursive, deref links, preserve mode, if target is a dir, overwrite instead of copying into it
cp -rLpT "$HOME/.local/sv" "$svdir"

exec runsvdir "$svdir" \
    'log: ...........................................................................................................................................................................................................................................................................................................................................................................................................'
